name: Branch Protection & Multi-Agent Coordination

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Prevent simultaneous modifications by multiple agents
  agent-coordination:
    name: Agent Coordination Check
    runs-on: ubuntu-latest
    outputs:
      can-proceed: ${{ steps.check-lock.outputs.can-proceed }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for concurrent modifications
      id: check-lock
      run: |
        # Check if another agent is currently working
        if [ -f ".agent-lock" ]; then
          LOCK_TIME=$(cat .agent-lock)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LOCK_TIME))
          
          # Lock expires after 30 minutes
          if [ $TIME_DIFF -lt 1800 ]; then
            echo "::error::Another agent is currently working on this repository. Please wait."
            echo "can-proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi
        
        # Create lock file for this workflow
        echo $(date +%s) > .agent-lock
        echo "can-proceed=true" >> $GITHUB_OUTPUT
        
    - name: Set agent lock
      if: github.event_name == 'pull_request'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .agent-lock
        git commit -m "chore: Set agent coordination lock" || true

  # Quality gates that must pass before merge
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: agent-coordination
    if: needs.agent-coordination.outputs.can-proceed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint check (required)
      run: npm run lint
      
    - name: TypeScript compilation (required)
      run: npm run build
      
    - name: Test suite (required)
      run: npm run test:coverage
      
    - name: Coverage threshold check
      run: |
        # Ensure minimum 50% coverage
        COVERAGE=$(npm run test:coverage -- --silent | grep -oP 'All files\s+\|\s+\K\d+(?=\.\d+)' || echo "0")
        if [ "$COVERAGE" -lt 50 ]; then
          echo "::error::Test coverage ($COVERAGE%) below required threshold (50%)"
          exit 1
        fi
        echo "::notice::Test coverage: $COVERAGE%"

  # Security and compliance checks
  security-compliance:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: agent-coordination
    if: needs.agent-coordination.outputs.can-proceed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Secret scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Dependency vulnerability scan
      run: |
        npm ci
        npm audit --audit-level=high
        
    - name: Check for breaking changes
      run: |
        # Ensure package.json version follows semver
        VERSION=$(node -p "require('./package.json').version")
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+'; then
          echo "::error::Invalid version format in package.json: $VERSION"
          exit 1
        fi
        
        # Check for API breaking changes in public interfaces
        if git diff --name-only HEAD~1 | grep -E "(src/index\.ts|src/.*\.ts)" > /dev/null; then
          echo "::warning::Code changes detected. Ensure backward compatibility."
        fi

  # Multi-agent conflict detection
  conflict-detection:
    name: Conflict Detection
    runs-on: ubuntu-latest
    needs: agent-coordination
    if: github.event_name == 'pull_request' && needs.agent-coordination.outputs.can-proceed == 'true'
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for merge conflicts
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Attempt merge to detect conflicts
        git checkout ${{ github.event.pull_request.base.ref }}
        git pull origin ${{ github.event.pull_request.base.ref }}
        
        if ! git merge --no-commit --no-ff ${{ github.event.pull_request.head.sha }}; then
          echo "::error::Merge conflicts detected. Please resolve conflicts before merging."
          git merge --abort
          exit 1
        fi
        
        git merge --abort
        echo "::notice::No merge conflicts detected"
        
    - name: Check for simultaneous file modifications
      run: |
        # Get list of files changed in this PR
        PR_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        # Check recent commits on main for conflicts
        RECENT_COMMITS=$(git log --since="1 hour ago" --name-only --pretty=format: ${{ github.event.pull_request.base.ref }} | sort -u)
        
        # Find overlapping files
        CONFLICTS=$(comm -12 <(echo "$PR_FILES" | sort) <(echo "$RECENT_COMMITS" | sort))
        
        if [ -n "$CONFLICTS" ]; then
          echo "::warning::Files modified in both PR and recent commits:"
          echo "$CONFLICTS"
          echo "::warning::Consider rebasing to avoid conflicts"
        fi

  # Automated code review
  automated-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    needs: [quality-gates, security-compliance]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Code complexity analysis
      run: |
        # Check for overly complex functions (basic heuristic)
        COMPLEX_FUNCTIONS=$(grep -n "function\|=>" src/**/*.ts | wc -l)
        if [ "$COMPLEX_FUNCTIONS" -gt 50 ]; then
          echo "::warning::High number of functions detected ($COMPLEX_FUNCTIONS). Consider code organization."
        fi
        
        # Check file sizes
        LARGE_FILES=$(find src -name "*.ts" -size +500c | wc -l)
        if [ "$LARGE_FILES" -gt 0 ]; then
          echo "::warning::Large TypeScript files detected. Consider breaking into smaller modules."
        fi
        
    - name: Documentation check
      run: |
        # Ensure README is updated if package.json changes
        if git diff --name-only HEAD~1 | grep "package.json" > /dev/null; then
          if ! git diff --name-only HEAD~1 | grep "README.md" > /dev/null; then
            echo "::warning::package.json changed but README.md was not updated"
          fi
        fi
        
        # Check for TODO comments
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" src/ || true | wc -l)
        if [ "$TODO_COUNT" -gt 5 ]; then
          echo "::warning::High number of TODO/FIXME comments ($TODO_COUNT). Consider addressing them."
        fi

  # Release readiness check
  release-readiness:
    name: Release Readiness
    runs-on: ubuntu-latest
    needs: [quality-gates, security-compliance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check version bump
      run: |
        # Get previous version from last release
        LAST_VERSION=$(git tag --list 'v*' --sort=-version:refname | head -n1 | sed 's/v//' || echo "0.0.0")
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        echo "Last release: $LAST_VERSION"
        echo "Current version: $CURRENT_VERSION"
        
        # Check if version was bumped
        if [ "$CURRENT_VERSION" == "$LAST_VERSION" ]; then
          echo "::notice::Version not changed since last release. No release needed."
        else
          echo "::notice::Version bumped. Ready for release: $CURRENT_VERSION"
        fi
        
    - name: Release artifact preparation
      run: |
        npm ci
        npm run build
        npm pack
        echo "::notice::Release artifacts prepared successfully"

  # Cleanup agent lock
  cleanup:
    name: Cleanup Agent Lock
    runs-on: ubuntu-latest
    needs: [quality-gates, security-compliance, conflict-detection]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Remove agent lock
      run: |
        if [ -f ".agent-lock" ]; then
          rm .agent-lock
          echo "::notice::Agent coordination lock removed"
        fi