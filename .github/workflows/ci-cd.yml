name: CI/CD for Obsidian MCP Server

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      id: lint
      run: npm run lint
      continue-on-error: true
      
    - name: Run TypeScript compilation
      id: tsc
      run: npm run build
      continue-on-error: true
      
    - name: Run tests with coverage
      id: test
      run: npm run test:coverage
      continue-on-error: true
      
    - name: Run integration tests
      id: integration-test
      run: npm run test:integration || echo "Integration tests not available"
      continue-on-error: true
        
    - name: Run benchmarks
      id: benchmark
      run: npm run benchmark || echo "Benchmarks not available"
      continue-on-error: true
      
    - name: Add warning annotations
      if: failure()
      run: |
        echo "::warning::Some tests or linting failed. Check the logs for details."
        if [[ "${{ steps.lint.outcome }}" == "failure" ]]; then
          echo "::warning::Linting failed - please run 'npm run lint' locally"
        fi
        if [[ "${{ steps.tsc.outcome }}" == "failure" ]]; then
          echo "::warning::TypeScript compilation failed - please run 'npm run build' locally"
        fi
        if [[ "${{ steps.test.outcome }}" == "failure" ]]; then
          echo "::warning::Tests failed - please run 'npm test' locally"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for audit
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      id: npm-audit
      run: npm audit --audit-level=high
      continue-on-error: true

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Configure npm
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        npm config set access public
        
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub release assets
      run: |
        npm pack
        echo "Package published successfully to npm registry"
        
    - name: Upload package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./*-obsidian-*.tgz
        asset_name: mcp-server-obsidian-${{ github.event.release.tag_name }}.tgz
        asset_content_type: application/gzip